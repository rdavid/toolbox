#!/bin/sh
# vi:et lbr noet sw=2 ts=2 tw=79 wrap
# Copyright 2019-2023 David Rabkin
# The script downloads all new video from pre-configured acoounts in
# ytda.lst. It updates IDs of downloaded files at done.txt (ytda.dne in Github).
# The script could be ran by a cron job. Uses: curl, HandBrakeCLI, mp4track,
# renamr, rsync, transcode, yt-dlp.
# The script is ran by cron, the environment is stricked.
export \
	LANG=en_US.UTF-8 \
	LC_ALL=en_US.UTF-8 \
	PATH="$PATH":/usr/local/bin

# shellcheck disable=SC2034 # Variable appears unused.
readonly BASE_APP_VERSION=0.9.20230126

# shellcheck disable=SC1091 # File not following.
. base.sh
AUT="$(dirname "$(realpath "$0")")/../cfg/ytda.aut"
SRC="$(dirname "$(realpath "$0")")/../cfg/ytda.lst"
readonly \
	ARC=/mnt/nas-ibx/ytb/app/done.txt \
	AUD="$BASE_WIP"/aud \
	AUT \
	CKS=/mnt/nas-ibx/ytb/app/cookies.txt \
	DST=/mnt/nas-ibx/ytb \
	RES="$BASE_WIP"/res \
	SRC \
	VID="$BASE_WIP"/vid

# Makes sure that needed software packages are installed at the host.
validate_cmd HandBrakeCLI mp4track renamr rsync tput transcode yt-dlp
url_exists http://youtube.com || die Check internet connection.
is_writable $DST $ARC || die Some directories are not writable.
is_readable "$AUT" "$SRC" || die Some directories are not readable.
for d in $RES $AUD $VID; do mkdir -p "$d" || die Unable to create "$d".; done
if is_readable $CKS; then
	log Uses cookie $CKS.
	CKS_PARAM=--cookies\ $CKS
else
	CKS_PARAM=''
fi

# shellcheck disable=SC2086 # Double quote to prevent globbing.
{
	yt-dlp \
		$CKS_PARAM \
		--add-metadata \
		--batch-file=$SRC \
		--download-archive $ARC \
		--format bestvideo+bestaudio \
		--merge-output-format mp4 \
		--output "$VID/%(uploader)s-%(upload_date)s-%(title)s.%(ext)s" \
		--playlist-reverse \
		2>&1 1>&3 3>&- | to_loge
} \
	3>&1 1>&2 | to_log

# Stops if there are no downloaded files.
is_empty "$VID" && { log There is no new downloaded video.; exit 0;}

# Calculates output table width for renamr and transcode utilities.
WID=$(( $(tput cols) - $(printf '19700101-01:01:01 I ' | wc -m) ))
[ "$WID" -le 1 ] && die Terminal\'s width "$(tput cold)" is too small.

# Renames all downloaded files to the same manner: ASCII, lower case, no
# spaces.
{
	renamr \
		--act \
		--dir "$VID" \
		--wid "$WID" \
		2>&1 1>&3 3>&- | to_loge
} \
	3>&1 1>&2 | to_log

# Sorts files to audio and video folders by authors.
while read -r a; do
	if file_exists "$VID/$a"*; then
		mv "$VID/$a"* "$AUD"
	fi
done < "$AUT"
is_empty "$VID" ||
	{
		transcode \
			--act \
			--dir "$VID" \
			--out "$RES" \
			--wid "$WID" \
			2>&1 1>&3 3>&- | to_loge
	} \
		3>&1 1>&2 | to_log
is_empty "$AUD" ||
	{
		transcode \
			--act \
			--dir "$AUD" \
			--mp3 \
			--out "$RES" \
			--wid "$WID" \
			2>&1 1>&3 3>&- | to_loge
	} \
		3>&1 1>&2 | to_log
{
	rsync \
		--compress \
		--human-readable \
		--progress \
		--verbose \
		"$RES"/* $DST \
		2>&1 1>&3 3>&- | to_loge
} \
	3>&1 1>&2 | to_log

# Makes sure every file was copied succesfully to destination. Pass each file
# locally and verifies there is a file with a same name at destination.
nsrc=0
ndst=0
pipe="$BASE_WIP"/pipe
mkfifo "$pipe"
find "$RES" -type f -exec basename {} \; > "$pipe" &
while read -r name; do
	nsrc=$((nsrc+1))
	[ -f "$DST/$name" ] && ndst=$((ndst+1))
done < "$pipe"
rm "$pipe"

# Keeps files locally in case of a failure.
if [ $nsrc -eq 0 ] || [ $nsrc -ne $ndst ]; then
	arc="$BASE_WIP/../$BASE_IAM-arc"
	mkdir -p "$arc"
	is_empty "$VID" || mv "$VID"/* "$arc"
	is_empty "$AUD" || mv "$AUD"/* "$arc"
	is_empty "$RES" || mv "$RES"/* "$arc"
	logw "There are $nsrc files in $RES, but $ndst in $DST, archived at $arc."
else
	log "There are $nsrc files copied to $DST."
fi
